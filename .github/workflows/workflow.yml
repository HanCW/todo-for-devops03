# .github/workflows/main.yml
name: Todo App CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  APP_PATH: '/home/azureuser/app'

jobs:
  ci-cd:
    runs-on: ubuntu-latest

    # PostgreSQL 서비스 (테스트용)
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      # CI 단계
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Setup test database
        env:
          DATABASE_URL: postgresql://postgres:testpass@localhost:5432/testdb
        run: |
          # Prisma 스키마 파일이 있을 때만 실행
          if [ -f "prisma/schema.prisma" ]; then
            npx prisma generate
            npx prisma db push
            echo "✅ Test database setup completed"
          else
            echo "⚠️ Prisma schema not found, skipping database setup"
          fi

      - name: ✅ Run tests
        env:
          DATABASE_URL: postgresql://postgres:testpass@localhost:5432/testdb
          NEXTAUTH_SECRET: test-secret
          NEXTAUTH_URL: http://localhost:3000
        run: |
          # package.json에 test 스크립트가 있는지 확인
          if npm run | grep -q "test"; then
            npm test
            echo "✅ Tests completed successfully"
          else
            echo "⚠️ No test script found, skipping tests"
            echo "✅ Tests skipped successfully"
          fi

      - name: 🔨 Build application
        env:
          DATABASE_URL: postgresql://postgres:testpass@localhost:5432/testdb
          NEXTAUTH_SECRET: test-secret
          NEXTAUTH_URL: http://localhost:3000
        run: npm run build

      # CD 단계 (main 브랜치만)
      - name: 🚀 Deploy to Azure VM
        if: github.ref == 'refs/heads/main'
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: 🔧 Add VM to known hosts
        if: github.ref == 'refs/heads/main'
        run: |
          ssh-keyscan -H ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts

      - name: 📤 Deploy application
        if: github.ref == 'refs/heads/main'
        run: |
          ssh azureuser@${{ secrets.VM_HOST }} "
            echo '⏹️ Stopping application...'
            pm2 stop todo-app 2>/dev/null || echo 'No existing app to stop'
            pm2 delete todo-app 2>/dev/null || echo 'No existing app to delete'
          
            echo '🗑️ Removing old application...'
            rm -rf $APP_PATH
          
            echo '📥 Cloning new version...'
            git clone https://github.com/soongon/todo-for-devops.git $APP_PATH
            cd $APP_PATH
          
            echo '⚙️ Setting up environment...'
            cat > .env.local << 'EOL'
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
          NEXTAUTH_URL=http://${{ secrets.VM_HOST }}:3000
          NODE_ENV=production
          EOL
          
            echo '📦 Installing dependencies...'
            npm ci
          
            echo '🗄️ Setting up database...'
            if [ -f 'prisma/schema.prisma' ]; then
              npx prisma generate
              npx prisma db push
              echo '✅ Database setup completed'
            else
              echo '⚠️ No Prisma schema found, skipping database setup'
            fi
          
            echo '🔨 Building application...'
            npm run build
          
            echo '🚀 Starting application...'
            pm2 start npm --name todo-app -- start
            pm2 save
          
            echo '🔧 Configuring Nginx proxy...'
            sudo tee /etc/nginx/sites-available/todo-app << 'NGINX_EOF'
          server {
              listen 80;
              server_name _;
          
              location / {
                  proxy_pass http://localhost:3000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
                  proxy_cache_bypass \$http_upgrade;
              }
          }
          NGINX_EOF
          
            sudo rm -f /etc/nginx/sites-enabled/default
            sudo ln -sf /etc/nginx/sites-available/todo-app /etc/nginx/sites-enabled/
            sudo nginx -t && sudo systemctl reload nginx
          
            echo '✅ Deployment completed!'
          "

      - name: 🏥 Health check
        if: github.ref == 'refs/heads/main'
        run: |
          echo "⏳ Waiting for application to start..."
          sleep 30
          
          echo "🔍 Checking application health..."
          if curl -f -s http://${{ secrets.VM_HOST }}; then
            echo "✅ Application is healthy!"
          else
            echo "❌ Health check failed!"
            exit 1
          fi

      - name: 📝 Deployment summary
        if: always() && github.ref == 'refs/heads/main'
        run: |
          echo "📊 Deployment Summary:"
          echo "- Repository: ${{ github.repository }}"
          echo "- Commit: ${{ github.sha }}"
          echo "- Status: ${{ job.status }}"
          echo "- App URL: http://${{ secrets.VM_HOST }}"