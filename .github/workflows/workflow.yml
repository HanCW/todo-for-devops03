# .github/workflows/main.yml - 안정적인 업계 표준 방식
name: Stable Industry Standard CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  APP_PATH: '/home/azureuser/app'

jobs:
  # 🧪 CI 단계: 테스트 및 빌드
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: ✅ Run tests
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/testdb
          NEXTAUTH_SECRET: test-secret
          NEXTAUTH_URL: http://localhost:3000
          NODE_ENV: test
        run: |
          if npm run | grep -q "test"; then
            echo "🧪 Running tests..."
            npm test
            echo "✅ Tests completed successfully"
          else
            echo "⚠️ No test script found, skipping tests"
            echo "✅ Tests skipped successfully"
          fi

      - name: 🔨 Build for production
        env:
          DATABASE_URL: postgresql://dummy:dummy@localhost:5432/dummy
          NEXTAUTH_SECRET: build-time-secret
          NEXTAUTH_URL: http://localhost:3000
          NODE_ENV: production
        run: |
          echo "🔨 Building optimized production bundle..."
          npm run build
          
          echo "📊 Build artifacts created:"
          ls -la .next/ || echo "No .next directory found"

      # 🎯 배포용 패키지 생성
      - name: 📦 Create deployment package
        run: |
          echo "📦 Creating deployment package..."
          mkdir -p deploy-package
          
          # 필수 파일들 복사
          echo "Copying build files..."
          if [ -d ".next" ]; then
            cp -r .next/ deploy-package/
            echo "✅ .next directory copied"
          else
            echo "❌ .next directory not found!"
            exit 1
          fi
          
          if [ -d "public" ]; then
            cp -r public/ deploy-package/
            echo "✅ public directory copied"
          else
            echo "⚠️ No public directory found"
          fi
          
          cp package.json deploy-package/
          cp package-lock.json deploy-package/
          echo "✅ Package files copied"
          
          # Prisma 관련 파일들
          if [ -d "prisma" ]; then
            cp -r prisma/ deploy-package/
            echo "✅ Prisma files copied"
          fi
          
          # Next.js 설정 파일
          if [ -f "next.config.js" ]; then
            cp next.config.js deploy-package/
            echo "✅ Next.js config copied"
          fi
          
          echo "📊 Deployment package contents:"
          ls -la deploy-package/
          
          echo "📊 Package size:"
          du -sh deploy-package/

      - name: 📤 Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-build
          path: deploy-package/
          retention-days: 1
          if-no-files-found: error

      - name: 📊 Build job summary
        run: |
          echo "✅ Build job completed successfully!"
          echo "📦 Artifacts uploaded for deployment"
          echo "🔄 Deploy job will start if this is main branch"

  # 🚀 CD 단계: 배포 (main 브랜치만)
  deploy:
    runs-on: ubuntu-latest
    needs: build
    # main 브랜치이고 빌드가 성공했을 때만 실행
    if: github.ref == 'refs/heads/main' && needs.build.result == 'success'

    steps:
      - name: 🎯 Deploy job started
        run: |
          echo "🚀 Starting deployment to production..."
          echo "📋 Job Info:"
          echo "  - Branch: ${{ github.ref }}"
          echo "  - Commit: ${{ github.sha }}"
          echo "  - Build Status: ${{ needs.build.result }}"

      - name: 📥 Download deployment artifacts
        uses: actions/download-artifact@v4
        with:
          name: production-build
          path: ./deployment/

      - name: 🔍 Verify deployment package
        run: |
          echo "📦 Downloaded deployment package:"
          ls -la deployment/
          
          echo "📊 Package size:"
          du -sh deployment/
          
          # 필수 파일 확인
          if [ ! -d "deployment/.next" ]; then
            echo "❌ .next directory missing!"
            exit 1
          fi
          
          if [ ! -f "deployment/package.json" ]; then
            echo "❌ package.json missing!"
            exit 1
          fi
          
          echo "✅ All required files present"

      - name: 🔐 Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: 🔧 Add VM to known hosts
        run: ssh-keyscan -H ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts

      # 🎯 핵심: 아티팩트 기반 배포
      - name: 🚀 Deploy to production server
        run: |
          echo "🚀 Starting artifact-based deployment..."
          
          # 1. 애플리케이션 중지
          echo "⏹️ Stopping current application..."
          ssh azureuser@${{ secrets.VM_HOST }} "
            pm2 stop todo-app 2>/dev/null || echo 'No app running'
            pm2 delete todo-app 2>/dev/null || echo 'No app to delete'
          "
          
          # 2. 백업 생성  
          echo "💾 Creating backup..."
          ssh azureuser@${{ secrets.VM_HOST }} "
            if [ -d '$APP_PATH' ]; then
              sudo mv $APP_PATH $APP_PATH.backup.\$(date +%Y%m%d_%H%M%S) 2>/dev/null || true
            fi
            mkdir -p $APP_PATH
          "
          
          # 3. 새 버전 배포
          echo "📦 Deploying new version..."
          scp -r deployment/* azureuser@${{ secrets.VM_HOST }}:$APP_PATH/
          
          # 4. 환경 설정
          echo "⚙️ Setting up environment..."
          ssh azureuser@${{ secrets.VM_HOST }} "
            cd $APP_PATH
          
            # 환경 변수 파일 생성
            cat > .env.local << 'EOL'
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
          NEXTAUTH_URL=http://${{ secrets.VM_HOST }}:3000
          NODE_ENV=production
          EOL
          
            echo '✅ Environment configured'
          "
          
          # 5. 프로덕션 의존성 설치
          echo "📦 Installing production dependencies..."
          ssh azureuser@${{ secrets.VM_HOST }} "
            cd $APP_PATH
            npm ci --only=production --silent
            echo '✅ Dependencies installed'
          "
          
          # 6. 데이터베이스 설정
          echo "🗄️ Setting up database..."
          ssh azureuser@${{ secrets.VM_HOST }} "
            cd $APP_PATH
            if [ -f 'prisma/schema.prisma' ]; then
              npx prisma generate
              npx prisma db push
              echo '✅ Database configured'
            else
              echo '⚠️ No Prisma schema found'
            fi
          "
          
          # 7. Nginx 프록시 설정
          echo "🔧 Configuring Nginx proxy..."
          ssh azureuser@${{ secrets.VM_HOST }} "
            sudo tee /etc/nginx/sites-available/todo-app << 'NGINX_EOF'
          server {
              listen 80 default_server;
              listen [::]:80 default_server;
              server_name _;
          
              location / {
                  proxy_pass http://localhost:3000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
                  proxy_cache_bypass \$http_upgrade;
              }
          }
          NGINX_EOF
          
            sudo rm -f /etc/nginx/sites-enabled/default
            sudo ln -sf /etc/nginx/sites-available/todo-app /etc/nginx/sites-enabled/todo-app
            sudo nginx -t && sudo systemctl reload nginx
            echo '✅ Nginx configured'
          "
          
          # 8. 애플리케이션 시작
          echo "🚀 Starting application..."
          ssh azureuser@${{ secrets.VM_HOST }} "
            cd $APP_PATH
            pm2 start npm --name todo-app -- start
            pm2 save
            echo '✅ Application started'
          "
          
          echo "✅ Deployment completed!"

      - name: 🏥 Health check
        timeout-minutes: 3
        run: |
          echo "⏳ Waiting for application to start..."
          sleep 20
          
          echo "🔍 Running health checks..."
          for i in {1..5}; do
            echo "🩺 Health check attempt $i/5..."
          
            if curl -f -s --max-time 10 http://${{ secrets.VM_HOST }}; then
              echo "✅ Application is healthy and responding!"
              echo "🌐 App URL: http://${{ secrets.VM_HOST }}"
              exit 0
            fi
          
            echo "⏳ Retrying in 10 seconds..."
            sleep 10
          done
          
          echo "❌ Health check failed, but checking server status..."
          ssh azureuser@${{ secrets.VM_HOST }} "
            echo '📊 PM2 Status:'
            pm2 status
            echo '📋 Recent logs:'
            pm2 logs todo-app --lines 10 || echo 'No logs available'
            echo '🔌 Port check:'
            curl -s http://localhost:3000 | head -3 || echo 'Local connection failed'
          " || echo "Could not check server status"
          
          echo "⚠️ Manual verification may be required"
          exit 1

      - name: 📊 Deployment summary
        if: always()
        run: |
          echo "📊 Deployment Summary"
          echo "===================="
          echo "✅ Method: Artifact-based deployment"
          echo "✅ No server-side building required"  
          echo "✅ Optimized for speed and reliability"
          echo ""
          echo "📋 Details:"
          echo "- Repository: ${{ github.repository }}"
          echo "- Branch: ${{ github.ref_name }}"
          echo "- Commit: ${{ github.sha }}"
          echo "- Build Job: ${{ needs.build.result }}"
          echo "- Deploy Status: ${{ job.status }}"
          echo "- App URL: http://${{ secrets.VM_HOST }}"